/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package ru.phism.intellij.teso.documentation.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.Stack;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static ru.phism.intellij.teso.documentation.DocumentationParserTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Documentation.flex</tt>
 */
public class _DocumentationLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_CURLY_OPERATOR = 2;
  public static final int IN_H_CAPTION = 4;
  public static final int IN_H2_CAPTION = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\1\2\10\0\1\2\1\1\2\2\1\1\22\0\1\53\2\0\1\26\4\0\1\10\1\11\1\31\1\0\1\24\1"+
    "\63\1\16\1\0\1\3\1\15\1\17\1\20\1\21\1\22\1\23\3\3\1\27\2\0\1\30\3\0\1\47"+
    "\3\5\1\72\1\66\1\67\1\5\1\71\2\5\1\74\1\65\1\5\1\56\1\70\1\5\1\32\1\44\1\5"+
    "\1\52\1\64\1\5\1\73\2\5\1\12\1\0\1\13\1\0\1\4\1\0\1\41\1\43\1\45\1\62\1\33"+
    "\1\61\1\50\1\14\1\42\1\57\1\5\1\55\1\51\1\37\1\60\1\46\1\5\1\36\1\40\1\34"+
    "\1\35\1\54\2\5\1\75\1\5\1\6\1\25\1\7\202\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\4\1\1\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\5\4\1\21\1\22\1\23"+
    "\1\24\5\1\11\4\2\0\1\25\6\4\6\0\3\4"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\7\4"+
    "\6\0\12\4\6\0\10\4\1\35\1\4\6\0\2\4"+
    "\1\0\2\4\1\36\3\4\5\0\1\37\2\4\1\0"+
    "\1\40\1\4\1\41\2\4\5\0\2\4\1\0\2\4"+
    "\4\0\1\42\2\0\1\4\1\0\1\4\1\43\5\0"+
    "\1\44\1\4\1\0\1\4\3\0\1\45\4\0\1\4"+
    "\5\0\1\46\1\0\1\4\3\0\1\47\2\0\1\4"+
    "\2\0\1\50\2\0\1\4\4\0\1\4\4\0\1\51"+
    "\2\0\1\52\12\0\1\53\13\0\1\54\10\0\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\370\0\u0136\0\u0174"+
    "\0\u01b2\0\370\0\370\0\370\0\370\0\370\0\370\0\u01f0"+
    "\0\u022e\0\370\0\370\0\u026c\0\370\0\370\0\u02aa\0\u02e8"+
    "\0\u0326\0\u0364\0\u03a2\0\u03e0\0\370\0\370\0\370\0\370"+
    "\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554\0\u0592\0\u05d0"+
    "\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0"+
    "\0\370\0\u07fe\0\u083c\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972"+
    "\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62"+
    "\0\370\0\370\0\370\0\370\0\370\0\370\0\370\0\u0ba0"+
    "\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0d90"+
    "\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80"+
    "\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170"+
    "\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360"+
    "\0\u139e\0\u13dc\0\u141a\0\u1458\0\u01b2\0\u1496\0\u14d4\0\u1512"+
    "\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702"+
    "\0\u1740\0\u01b2\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4"+
    "\0\u18f2\0\u1930\0\370\0\u196e\0\u19ac\0\u19ea\0\u01b2\0\u1a28"+
    "\0\u01b2\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda"+
    "\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca"+
    "\0\u1e08\0\370\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c"+
    "\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\370\0\u20f0\0\u212e"+
    "\0\u216c\0\u21aa\0\u21e8\0\u2226\0\370\0\u2264\0\u22a2\0\u22e0"+
    "\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492\0\370"+
    "\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8\0\370\0\u2606\0\u2644"+
    "\0\u2682\0\u26c0\0\u26fe\0\370\0\u273c\0\u277a\0\u27b8\0\u27f6"+
    "\0\u2834\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u296a\0\u29a8\0\u29e6"+
    "\0\370\0\u2a24\0\u2a62\0\370\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a"+
    "\0\u2b98\0\u2bd6\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\370\0\u2d0c"+
    "\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc"+
    "\0\u2f3a\0\u2f78\0\370\0\u2fb6\0\u2ff4\0\u3032\0\u3070\0\u30ae"+
    "\0\u30ec\0\u312a\0\u3168\0\370";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\7\1\21\5\7\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\5\11\1\30\4\11"+
    "\1\31\1\11\1\32\4\11\1\5\1\11\1\33\1\34"+
    "\4\11\1\5\12\11\7\35\1\36\67\35\1\37\74\35"+
    "\1\5\1\40\1\6\47\5\1\41\3\5\1\42\5\5"+
    "\1\43\2\5\1\44\2\5\1\45\3\5\101\0\1\7"+
    "\11\0\1\7\1\0\5\7\57\0\1\11\6\0\1\11"+
    "\15\0\1\46\6\11\1\47\10\11\1\50\1\0\7\11"+
    "\1\0\12\11\3\0\3\11\6\0\2\11\1\0\5\11"+
    "\6\0\21\11\1\0\7\11\1\0\12\11\3\0\3\11"+
    "\6\0\1\11\1\51\1\0\1\52\1\53\1\54\1\55"+
    "\1\56\6\0\21\11\1\0\7\11\1\0\12\11\16\0"+
    "\1\57\63\0\1\60\1\11\6\0\1\11\15\0\21\11"+
    "\1\0\7\11\1\0\12\11\31\0\1\61\47\0\3\11"+
    "\6\0\2\11\1\0\5\11\6\0\10\11\1\62\10\11"+
    "\1\0\7\11\1\0\12\11\3\0\3\11\6\0\2\11"+
    "\1\0\5\11\6\0\13\11\1\63\5\11\1\0\7\11"+
    "\1\0\12\11\3\0\3\11\6\0\2\11\1\0\5\11"+
    "\6\0\3\11\1\64\1\65\14\11\1\0\7\11\1\0"+
    "\12\11\3\0\3\11\6\0\2\11\1\0\5\11\6\0"+
    "\21\11\1\0\4\11\1\66\2\11\1\0\12\11\3\0"+
    "\3\11\6\0\2\11\1\0\5\11\6\0\11\11\1\67"+
    "\7\11\1\0\7\11\1\0\12\11\71\0\1\70\47\0"+
    "\1\71\117\0\1\72\51\0\1\73\13\0\1\74\74\0"+
    "\1\75\24\0\3\11\6\0\2\11\1\0\5\11\6\0"+
    "\1\11\1\76\17\11\1\0\7\11\1\0\12\11\3\0"+
    "\3\11\6\0\2\11\1\0\5\11\6\0\2\11\1\77"+
    "\16\11\1\0\7\11\1\0\12\11\3\0\3\11\6\0"+
    "\2\11\1\0\5\11\6\0\6\11\1\100\12\11\1\0"+
    "\7\11\1\0\12\11\3\0\3\11\6\0\2\11\1\101"+
    "\5\11\6\0\21\11\1\0\7\11\1\0\12\11\3\0"+
    "\3\11\6\0\2\11\1\102\5\11\6\0\21\11\1\0"+
    "\7\11\1\0\12\11\3\0\3\11\6\0\2\11\1\103"+
    "\5\11\6\0\21\11\1\0\7\11\1\0\12\11\3\0"+
    "\3\11\6\0\2\11\1\104\5\11\6\0\21\11\1\0"+
    "\7\11\1\0\12\11\3\0\3\11\6\0\2\11\1\105"+
    "\5\11\6\0\21\11\1\0\7\11\1\0\12\11\3\0"+
    "\3\11\6\0\2\11\1\106\5\11\6\0\21\11\1\0"+
    "\7\11\1\0\12\11\16\0\1\107\64\0\1\11\6\0"+
    "\1\11\15\0\21\11\1\0\7\11\1\0\12\11\3\0"+
    "\3\11\6\0\2\11\1\0\5\11\6\0\21\11\1\0"+
    "\1\11\1\110\5\11\1\0\12\11\3\0\3\11\6\0"+
    "\2\11\1\0\5\11\6\0\4\11\1\111\14\11\1\0"+
    "\7\11\1\0\12\11\3\0\3\11\6\0\2\11\1\0"+
    "\5\11\6\0\11\11\1\112\7\11\1\0\7\11\1\0"+
    "\12\11\3\0\3\11\6\0\2\11\1\0\5\11\6\0"+
    "\10\11\1\113\10\11\1\0\4\11\1\114\2\11\1\0"+
    "\12\11\3\0\3\11\6\0\2\11\1\0\5\11\6\0"+
    "\13\11\1\115\5\11\1\0\7\11\1\0\12\11\3\0"+
    "\3\11\6\0\2\11\1\0\5\11\6\0\21\11\1\0"+
    "\3\11\1\116\3\11\1\0\12\11\53\0\1\117\101\0"+
    "\1\120\71\0\1\121\73\0\1\122\104\0\1\123\50\0"+
    "\1\124\45\0\3\11\6\0\2\11\1\0\5\11\6\0"+
    "\2\11\1\125\16\11\1\0\7\11\1\0\12\11\3\0"+
    "\3\11\6\0\2\11\1\0\5\11\6\0\2\11\1\126"+
    "\16\11\1\0\7\11\1\0\12\11\3\0\3\11\6\0"+
    "\2\11\1\0\5\11\6\0\1\11\1\127\17\11\1\0"+
    "\7\11\1\0\12\11\3\0\3\11\6\0\2\11\1\0"+
    "\5\11\6\0\7\11\1\130\11\11\1\0\7\11\1\0"+
    "\12\11\3\0\3\11\6\0\2\11\1\0\5\11\6\0"+
    "\10\11\1\131\10\11\1\0\7\11\1\0\12\11\3\0"+
    "\3\11\6\0\2\11\1\0\5\11\6\0\21\11\1\0"+
    "\1\11\1\132\5\11\1\0\12\11\3\0\3\11\6\0"+
    "\2\11\1\0\5\11\6\0\21\11\1\0\1\133\6\11"+
    "\1\0\12\11\3\0\3\11\6\0\2\11\1\0\5\11"+
    "\6\0\2\11\1\134\16\11\1\0\7\11\1\0\12\11"+
    "\3\0\3\11\6\0\2\11\1\0\5\11\6\0\7\11"+
    "\1\135\11\11\1\0\7\11\1\0\12\11\3\0\3\11"+
    "\6\0\2\11\1\0\5\11\6\0\1\11\1\136\17\11"+
    "\1\0\7\11\1\0\12\11\73\0\1\137\35\0\1\140"+
    "\130\0\1\141\42\0\1\142\105\0\1\143\71\0\1\144"+
    "\41\0\3\11\6\0\2\11\1\0\5\11\6\0\3\11"+
    "\1\145\15\11\1\0\7\11\1\0\12\11\3\0\3\11"+
    "\6\0\2\11\1\0\5\11\6\0\4\11\1\146\14\11"+
    "\1\0\7\11\1\0\12\11\3\0\3\11\6\0\2\11"+
    "\1\0\5\11\6\0\6\11\1\147\12\11\1\0\7\11"+
    "\1\0\12\11\3\0\3\11\6\0\2\11\1\0\5\11"+
    "\6\0\11\11\1\150\7\11\1\0\7\11\1\0\12\11"+
    "\3\0\3\11\6\0\2\11\1\0\5\11\6\0\14\11"+
    "\1\151\4\11\1\0\7\11\1\0\12\11\3\0\3\11"+
    "\6\0\2\11\1\0\5\11\6\0\10\11\1\152\10\11"+
    "\1\0\7\11\1\0\12\11\3\0\3\11\6\0\2\11"+
    "\1\0\5\11\6\0\7\11\1\153\11\11\1\0\7\11"+
    "\1\0\12\11\3\0\3\11\6\0\2\11\1\0\5\11"+
    "\6\0\1\11\1\154\17\11\1\0\7\11\1\0\12\11"+
    "\3\0\3\11\6\0\2\11\1\0\5\11\6\0\21\11"+
    "\1\0\1\11\1\155\5\11\1\0\12\11\3\0\3\11"+
    "\6\0\2\11\1\0\5\11\6\0\13\11\1\156\5\11"+
    "\1\0\7\11\1\0\12\11\65\0\1\157\55\0\1\160"+
    "\65\0\1\161\113\0\1\162\63\0\1\163\70\0\1\164"+
    "\44\0\3\11\6\0\2\11\1\0\5\11\6\0\4\11"+
    "\1\165\14\11\1\0\7\11\1\0\12\11\3\0\3\11"+
    "\6\0\2\11\1\0\5\11\6\0\10\11\1\166\10\11"+
    "\1\0\7\11\1\0\12\11\3\0\3\11\6\0\2\11"+
    "\1\0\5\11\6\0\21\11\1\167\7\11\1\0\12\11"+
    "\3\0\3\11\6\0\2\11\1\0\5\11\6\0\21\11"+
    "\1\0\1\11\1\170\5\11\1\0\12\11\3\0\3\11"+
    "\6\0\2\11\1\0\5\11\6\0\2\11\1\171\16\11"+
    "\1\0\7\11\1\0\12\11\3\0\3\11\6\0\2\11"+
    "\1\0\5\11\6\0\13\11\1\172\5\11\1\0\7\11"+
    "\1\0\12\11\3\0\3\11\6\0\2\11\1\0\5\11"+
    "\6\0\2\11\1\173\16\11\1\0\7\11\1\0\12\11"+
    "\3\0\3\11\6\0\2\11\1\0\5\11\6\0\13\11"+
    "\1\174\5\11\1\0\7\11\1\0\12\11\3\0\3\11"+
    "\6\0\2\11\1\0\5\11\6\0\2\11\1\175\16\11"+
    "\1\0\7\11\1\0\12\11\74\0\1\176\35\0\1\177"+
    "\100\0\1\200\105\0\1\201\103\0\1\202\60\0\1\203"+
    "\40\0\3\11\6\0\2\11\1\0\5\11\6\0\5\11"+
    "\1\204\13\11\1\0\7\11\1\0\12\11\3\0\3\11"+
    "\6\0\2\11\1\0\5\11\6\0\11\11\1\205\7\11"+
    "\1\0\7\11\1\0\12\11\54\0\1\206\24\0\3\11"+
    "\6\0\2\11\1\0\5\11\6\0\1\11\1\207\17\11"+
    "\1\0\7\11\1\0\12\11\3\0\3\11\6\0\2\11"+
    "\1\0\5\11\6\0\15\11\1\210\3\11\1\0\7\11"+
    "\1\0\12\11\3\0\3\11\6\0\2\11\1\0\5\11"+
    "\6\0\1\11\1\211\17\11\1\0\7\11\1\0\12\11"+
    "\3\0\3\11\6\0\2\11\1\0\5\11\6\0\2\11"+
    "\1\212\16\11\1\0\7\11\1\0\12\11\3\0\3\11"+
    "\6\0\2\11\1\0\5\11\6\0\6\11\1\213\12\11"+
    "\1\0\7\11\1\0\12\11\53\0\1\214\75\0\1\215"+
    "\67\0\1\216\120\0\1\217\60\0\1\220\25\0\3\11"+
    "\6\0\2\11\1\0\5\11\6\0\6\11\1\221\12\11"+
    "\1\0\7\11\1\0\12\11\3\0\3\11\6\0\2\11"+
    "\1\0\5\11\6\0\3\11\1\222\15\11\1\0\7\11"+
    "\1\0\12\11\41\0\1\223\37\0\3\11\6\0\2\11"+
    "\1\0\5\11\6\0\4\11\1\224\14\11\1\0\7\11"+
    "\1\0\12\11\3\0\3\11\6\0\2\11\1\0\5\11"+
    "\6\0\1\11\1\225\17\11\1\0\7\11\1\0\12\11"+
    "\3\0\3\11\6\0\2\11\1\0\5\11\6\0\21\11"+
    "\1\226\7\11\1\0\12\11\74\0\1\227\50\0\1\230"+
    "\62\0\1\231\132\0\1\232\70\0\1\233\14\0\3\11"+
    "\6\0\2\11\1\0\5\11\3\0\1\234\2\0\21\11"+
    "\1\0\7\11\1\0\12\11\3\0\3\11\6\0\2\11"+
    "\1\0\5\11\6\0\2\11\1\235\16\11\1\0\7\11"+
    "\1\0\12\11\36\0\1\236\42\0\3\11\6\0\2\11"+
    "\1\0\5\11\6\0\16\11\1\237\2\11\1\0\7\11"+
    "\1\0\12\11\3\0\3\11\6\0\2\11\1\0\5\11"+
    "\6\0\21\11\1\0\6\11\1\240\1\0\12\11\34\0"+
    "\1\241\102\0\1\242\124\0\1\243\47\0\1\244\74\0"+
    "\1\245\40\0\1\246\74\0\3\11\6\0\2\11\1\0"+
    "\5\11\6\0\1\11\1\247\17\11\1\0\7\11\1\0"+
    "\12\11\42\0\1\250\36\0\3\11\6\0\2\11\1\0"+
    "\5\11\6\0\3\11\1\251\15\11\1\0\7\11\1\0"+
    "\12\11\3\0\3\11\6\0\2\11\1\0\5\11\6\0"+
    "\21\11\1\0\7\11\1\252\12\11\14\0\1\253\156\0"+
    "\1\254\71\0\1\255\64\0\1\256\53\0\1\257\42\0"+
    "\3\11\6\0\2\11\1\0\5\11\3\0\1\260\2\0"+
    "\21\11\1\0\7\11\1\0\12\11\41\0\1\261\37\0"+
    "\3\11\6\0\2\11\1\0\5\11\6\0\17\11\1\262"+
    "\1\11\1\0\7\11\1\0\12\11\41\0\1\263\75\0"+
    "\1\264\114\0\1\265\54\0\1\266\100\0\1\267\37\0"+
    "\1\270\134\0\1\271\35\0\3\11\6\0\2\11\1\0"+
    "\5\11\6\0\1\11\1\272\17\11\1\0\7\11\1\0"+
    "\12\11\34\0\1\273\75\0\1\274\76\0\1\275\100\0"+
    "\1\276\76\0\1\277\111\0\1\300\23\0\3\11\6\0"+
    "\2\11\1\0\5\11\6\0\5\11\1\301\13\11\1\0"+
    "\7\11\1\0\12\11\34\0\1\302\114\0\1\303\56\0"+
    "\1\304\104\0\1\305\65\0\1\306\45\0\3\11\6\0"+
    "\2\11\1\0\5\11\6\0\2\11\1\307\16\11\1\0"+
    "\7\11\1\0\12\11\36\0\1\310\101\0\1\311\110\0"+
    "\1\312\73\0\1\313\25\0\3\11\6\0\2\11\1\0"+
    "\5\11\6\0\6\11\1\314\12\11\1\0\7\11\1\0"+
    "\12\11\42\0\1\315\72\0\1\316\71\0\1\317\100\0"+
    "\1\320\42\0\3\11\6\0\2\11\1\0\5\11\3\0"+
    "\1\321\2\0\21\11\1\0\7\11\1\0\12\11\43\0"+
    "\1\322\46\0\1\323\121\0\1\324\70\0\1\325\77\0"+
    "\1\326\73\0\1\327\76\0\1\330\75\0\1\331\77\0"+
    "\1\332\74\0\1\333\73\0\1\334\104\0\1\335\71\0"+
    "\1\336\77\0\1\337\71\0\1\340\100\0\1\341\111\0"+
    "\1\342\62\0\1\343\100\0\1\344\50\0\1\345\112\0"+
    "\1\346\60\0\1\347\73\0\1\350\77\0\1\351\120\0"+
    "\1\352\40\0\1\353\145\0\1\354\63\0\1\355\113\0"+
    "\1\356\53\0\1\357\112\0\1\360\103\0\1\361\52\0"+
    "\1\362\117\0\1\363\66\0\1\364\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12710];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\3\1\6\11\2\1\2\11\1\1\2\11"+
    "\6\1\4\11\16\1\2\0\1\11\6\1\6\0\3\1"+
    "\7\11\7\1\6\0\12\1\6\0\12\1\6\0\2\1"+
    "\1\0\6\1\5\0\1\11\2\1\1\0\5\1\5\0"+
    "\2\1\1\0\2\1\4\0\1\11\2\0\1\1\1\0"+
    "\2\1\5\0\1\11\1\1\1\0\1\1\3\0\1\11"+
    "\4\0\1\1\5\0\1\11\1\0\1\1\3\0\1\11"+
    "\2\0\1\1\2\0\1\11\2\0\1\1\4\0\1\1"+
    "\4\0\1\11\2\0\1\11\12\0\1\11\13\0\1\11"+
    "\10\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public _DocumentationLexer() {
    this((java.io.Reader)null);
}

private void yy_push_state(int state) { myStack.push(yystate()); yybegin(state);}
private void yy_pop_state() { yybegin(myStack.pop());}
private void yy_switch_state(int state) { yy_pop_state(); yy_push_state(state); }
private Stack<Integer> myStack = new Stack<>();

private int myScanStart;
private int restoreCurrentPosition() { return zzStartRead = myScanStart; }
private int startComplexToken() { return myScanStart = zzStartRead; }

private IElementType finishComplexToken(IElementType type) { yy_pop_state(); restoreCurrentPosition(); return type; }
private IElementType finishComplexToken(IElementType type, int state) { yy_push_state(state); restoreCurrentPosition(); return type; }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _DocumentationLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case IN_CURLY_OPERATOR: {
              return finishComplexToken(LINE);
            }  // fall though
            case 245: break;
            case IN_H_CAPTION: {
              return finishComplexToken(H_CAPTION);
            }  // fall though
            case 246: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 46: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 47: break;
          case 3: 
            { return NUMBER;
            } 
            // fall through
          case 48: break;
          case 4: 
            { return IDENTIFIER;
            } 
            // fall through
          case 49: break;
          case 5: 
            { yy_push_state(IN_CURLY_OPERATOR); startComplexToken(); return L_CURLY;
            } 
            // fall through
          case 50: break;
          case 6: 
            { return R_CURLY;
            } 
            // fall through
          case 51: break;
          case 7: 
            { return L_PAREN;
            } 
            // fall through
          case 52: break;
          case 8: 
            { return R_PAREN;
            } 
            // fall through
          case 53: break;
          case 9: 
            { return L_BRACKET;
            } 
            // fall through
          case 54: break;
          case 10: 
            { return R_BRACKET;
            } 
            // fall through
          case 55: break;
          case 11: 
            { return COMMA;
            } 
            // fall through
          case 56: break;
          case 12: 
            { return OR;
            } 
            // fall through
          case 57: break;
          case 13: 
            { return HASH;
            } 
            // fall through
          case 58: break;
          case 14: 
            { return SEMICOLON;
            } 
            // fall through
          case 59: break;
          case 15: 
            { return EQUALS;
            } 
            // fall through
          case 60: break;
          case 16: 
            { return ASTERISK;
            } 
            // fall through
          case 61: break;
          case 17: 
            { 
            } 
            // fall through
          case 62: break;
          case 18: 
            { yypushback(1); return finishComplexToken(LINE);
            } 
            // fall through
          case 63: break;
          case 19: 
            { yypushback(1); return finishComplexToken(H_CAPTION);
            } 
            // fall through
          case 64: break;
          case 20: 
            { yy_pop_state(); return WHITE_SPACE;
            } 
            // fall through
          case 65: break;
          case 21: 
            { return ASTERISK_DOUBLE;
            } 
            // fall through
          case 66: break;
          case 22: 
            { yy_push_state(IN_H_CAPTION); startComplexToken(); return H1;
            } 
            // fall through
          case 67: break;
          case 23: 
            { yy_push_state(IN_H2_CAPTION); return H2;
            } 
            // fall through
          case 68: break;
          case 24: 
            { yy_push_state(IN_H_CAPTION); startComplexToken(); return H3;
            } 
            // fall through
          case 69: break;
          case 25: 
            { yy_push_state(IN_H_CAPTION); startComplexToken(); return H4;
            } 
            // fall through
          case 70: break;
          case 26: 
            { yy_push_state(IN_H_CAPTION); startComplexToken(); return H5;
            } 
            // fall through
          case 71: break;
          case 27: 
            { yy_push_state(IN_H_CAPTION); startComplexToken(); return H6;
            } 
            // fall through
          case 72: break;
          case 28: 
            { return ELLIPSIS;
            } 
            // fall through
          case 73: break;
          case 29: 
            { return LOCAL;
            } 
            // fall through
          case 74: break;
          case 30: 
            { return PUBLIC;
            } 
            // fall through
          case 75: break;
          case 31: 
            { return EVENTS;
            } 
            // fall through
          case 76: break;
          case 32: 
            { return NILABLE;
            } 
            // fall through
          case 77: break;
          case 33: 
            { return PRIVATE;
            } 
            // fall through
          case 78: break;
          case 34: 
            { return GAME_API;
            } 
            // fall through
          case 79: break;
          case 35: 
            { return PROTECTED;
            } 
            // fall through
          case 80: break;
          case 36: 
            { return RETURNS;
            } 
            // fall through
          case 81: break;
          case 37: 
            { return OBJECT_API;
            } 
            // fall through
          case 82: break;
          case 38: 
            { return ATTRIBUTE;
            } 
            // fall through
          case 83: break;
          case 39: 
            { return VM_FUNCTIONS;
            } 
            // fall through
          case 84: break;
          case 40: 
            { return UI_XML_LAYOUT;
            } 
            // fall through
          case 85: break;
          case 41: 
            { return SCRIPT_ARGUMENTS;
            } 
            // fall through
          case 86: break;
          case 42: 
            { return GLOBAL_VARIABLES;
            } 
            // fall through
          case 87: break;
          case 43: 
            { return PROTECTED_ATTRIBUTES;
            } 
            // fall through
          case 88: break;
          case 44: 
            { return USES_VARIABLE_RETURNS;
            } 
            // fall through
          case 89: break;
          case 45: 
            { return OBJECT_INHERITANCE;
            } 
            // fall through
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
